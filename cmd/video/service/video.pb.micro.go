// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: video/pb/video.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VideoModule service

func NewVideoModuleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VideoModule service

type VideoModuleService interface {
	// VideoPublish 视频上传
	VideoPublish(ctx context.Context, in *DouyinPublishActionRequest, opts ...client.CallOption) (*DouyinPublishActionResponse, error)
	// VideoFeed 视频流返回
	VideoFeed(ctx context.Context, in *DouyinFeedRequest, opts ...client.CallOption) (*DouyinFeedResponse, error)
	// PlayVideo 视频播放
	PlayVideo(ctx context.Context, in *PlayVideoReq, opts ...client.CallOption) (*PlayVideoResp, error)
	// GetCover 获取封面
	GetCover(ctx context.Context, in *GetCoverReq, opts ...client.CallOption) (*GetCoverResp, error)
	// GetVideoList 获取用户发布列表
	GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...client.CallOption) (*GetVideoListResp, error)
}

type videoModuleService struct {
	c    client.Client
	name string
}

func NewVideoModuleService(name string, c client.Client) VideoModuleService {
	return &videoModuleService{
		c:    c,
		name: name,
	}
}

func (c *videoModuleService) VideoPublish(ctx context.Context, in *DouyinPublishActionRequest, opts ...client.CallOption) (*DouyinPublishActionResponse, error) {
	req := c.c.NewRequest(c.name, "VideoModule.VideoPublish", in)
	out := new(DouyinPublishActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoModuleService) VideoFeed(ctx context.Context, in *DouyinFeedRequest, opts ...client.CallOption) (*DouyinFeedResponse, error) {
	req := c.c.NewRequest(c.name, "VideoModule.VideoFeed", in)
	out := new(DouyinFeedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoModuleService) PlayVideo(ctx context.Context, in *PlayVideoReq, opts ...client.CallOption) (*PlayVideoResp, error) {
	req := c.c.NewRequest(c.name, "VideoModule.PlayVideo", in)
	out := new(PlayVideoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoModuleService) GetCover(ctx context.Context, in *GetCoverReq, opts ...client.CallOption) (*GetCoverResp, error) {
	req := c.c.NewRequest(c.name, "VideoModule.GetCover", in)
	out := new(GetCoverResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoModuleService) GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...client.CallOption) (*GetVideoListResp, error) {
	req := c.c.NewRequest(c.name, "VideoModule.GetVideoList", in)
	out := new(GetVideoListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoModule service

type VideoModuleHandler interface {
	// VideoPublish 视频上传
	VideoPublish(context.Context, *DouyinPublishActionRequest, *DouyinPublishActionResponse) error
	// VideoFeed 视频流返回
	VideoFeed(context.Context, *DouyinFeedRequest, *DouyinFeedResponse) error
	// PlayVideo 视频播放
	PlayVideo(context.Context, *PlayVideoReq, *PlayVideoResp) error
	// GetCover 获取封面
	GetCover(context.Context, *GetCoverReq, *GetCoverResp) error
	// GetVideoList 获取用户发布列表
	GetVideoList(context.Context, *GetVideoListReq, *GetVideoListResp) error
}

func RegisterVideoModuleHandler(s server.Server, hdlr VideoModuleHandler, opts ...server.HandlerOption) error {
	type videoModule interface {
		VideoPublish(ctx context.Context, in *DouyinPublishActionRequest, out *DouyinPublishActionResponse) error
		VideoFeed(ctx context.Context, in *DouyinFeedRequest, out *DouyinFeedResponse) error
		PlayVideo(ctx context.Context, in *PlayVideoReq, out *PlayVideoResp) error
		GetCover(ctx context.Context, in *GetCoverReq, out *GetCoverResp) error
		GetVideoList(ctx context.Context, in *GetVideoListReq, out *GetVideoListResp) error
	}
	type VideoModule struct {
		videoModule
	}
	h := &videoModuleHandler{hdlr}
	return s.Handle(s.NewHandler(&VideoModule{h}, opts...))
}

type videoModuleHandler struct {
	VideoModuleHandler
}

func (h *videoModuleHandler) VideoPublish(ctx context.Context, in *DouyinPublishActionRequest, out *DouyinPublishActionResponse) error {
	return h.VideoModuleHandler.VideoPublish(ctx, in, out)
}

func (h *videoModuleHandler) VideoFeed(ctx context.Context, in *DouyinFeedRequest, out *DouyinFeedResponse) error {
	return h.VideoModuleHandler.VideoFeed(ctx, in, out)
}

func (h *videoModuleHandler) PlayVideo(ctx context.Context, in *PlayVideoReq, out *PlayVideoResp) error {
	return h.VideoModuleHandler.PlayVideo(ctx, in, out)
}

func (h *videoModuleHandler) GetCover(ctx context.Context, in *GetCoverReq, out *GetCoverResp) error {
	return h.VideoModuleHandler.GetCover(ctx, in, out)
}

func (h *videoModuleHandler) GetVideoList(ctx context.Context, in *GetVideoListReq, out *GetVideoListResp) error {
	return h.VideoModuleHandler.GetVideoList(ctx, in, out)
}
